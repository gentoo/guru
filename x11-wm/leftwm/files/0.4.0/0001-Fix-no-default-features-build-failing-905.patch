From 345d0711b051a52dd901acdad9051ab13b8989b4 Mon Sep 17 00:00:00 2001
From: VuiMuich <jm.spam@gmx.net>
Date: Wed, 19 Oct 2022 20:57:46 +0200
Subject: [PATCH] Fix `--no-default-features` build failing (#905)

* fix no-default-features build failing

* add feature flag to `fn is_valid_scratchpad_name`
---
 leftwm/src/bin/lefthk-worker.rs | 30 ++++++++++++++++--------------
 leftwm/src/config/keybind.rs    |  1 +
 leftwm/src/utils/log/mod.rs     |  1 +
 3 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/leftwm/src/bin/lefthk-worker.rs b/leftwm/src/bin/lefthk-worker.rs
index 22c2d2d..4783695 100644
--- a/leftwm/src/bin/lefthk-worker.rs
+++ b/leftwm/src/bin/lefthk-worker.rs
@@ -3,24 +3,26 @@ use lefthk_core::{config::Config, worker::Worker};
 #[cfg(feature = "lefthk")]
 use xdg::BaseDirectories;
 
-#[cfg(feature = "lefthk")]
 fn main() {
-    leftwm::utils::log::setup_logging();
+    #[cfg(feature = "lefthk")]
+    {
+        leftwm::utils::log::setup_logging();
 
-    tracing::info!("lefthk-worker booted!");
+        tracing::info!("lefthk-worker booted!");
 
-    let exit_status = std::panic::catch_unwind(|| {
-        let rt = tokio::runtime::Runtime::new().expect("ERROR: couldn't init Tokio runtime");
-        let _rt_guard = rt.enter();
-        let config = leftwm::load();
-        let path = BaseDirectories::with_prefix("leftwm-lefthk")
-            .expect("ERROR: could not find base directory");
+        let exit_status = std::panic::catch_unwind(|| {
+            let rt = tokio::runtime::Runtime::new().expect("ERROR: couldn't init Tokio runtime");
+            let _rt_guard = rt.enter();
+            let config = leftwm::load();
+            let path = BaseDirectories::with_prefix("leftwm-lefthk")
+                .expect("ERROR: could not find base directory");
 
-        rt.block_on(Worker::new(config.mapped_bindings(), path).event_loop());
-    });
+            rt.block_on(Worker::new(config.mapped_bindings(), path).event_loop());
+        });
 
-    match exit_status {
-        Ok(_) => tracing::info!("Completed"),
-        Err(err) => tracing::error!("Completed with error: {:?}", err),
+        match exit_status {
+            Ok(_) => tracing::info!("Completed"),
+            Err(err) => tracing::error!("Completed with error: {:?}", err),
+        }
     }
 }
diff --git a/leftwm/src/config/keybind.rs b/leftwm/src/config/keybind.rs
index 479aed7..c7886e9 100644
--- a/leftwm/src/config/keybind.rs
+++ b/leftwm/src/config/keybind.rs
@@ -173,6 +173,7 @@ impl Modifier {
     }
 }
 
+#[cfg(feature = "lefthk")]
 fn is_valid_scratchpad_name(config: &Config, scratchpad_name: &str) -> bool {
     config
         .scratchpad
diff --git a/leftwm/src/utils/log/mod.rs b/leftwm/src/utils/log/mod.rs
index db8c178..e49042f 100644
--- a/leftwm/src/utils/log/mod.rs
+++ b/leftwm/src/utils/log/mod.rs
@@ -17,6 +17,7 @@ pub fn setup_logging() {
         .expect("Couldn't setup global subscriber (logger)");
 }
 
+#[allow(clippy::let_and_return)]
 fn get_subscribers() -> impl Subscriber {
     let env_filter = EnvFilter::builder()
         .with_default_directive(LevelFilter::DEBUG.into())
-- 
2.35.1


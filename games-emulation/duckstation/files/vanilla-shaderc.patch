--- a/src/util/gpu_device.cpp.org	2025-05-19 18:05:55.338316551 -0700
+++ b/src/util/gpu_device.cpp	2025-05-19 19:04:01.581608602 -0700
@@ -1438,7 +1438,6 @@
   X(shaderc_compile_options_set_generate_debug_info)                                                                   \
   X(shaderc_compile_options_set_optimization_level)                                                                    \
   X(shaderc_compile_options_set_target_env)                                                                            \
-  X(shaderc_compilation_status_to_string)                                                                              \
   X(shaderc_compile_into_spv)                                                                                          \
   X(shaderc_result_release)                                                                                            \
   X(shaderc_result_get_length)                                                                                         \
@@ -1446,7 +1445,6 @@
   X(shaderc_result_get_bytes)                                                                                          \
   X(shaderc_result_get_compilation_status)                                                                             \
   X(shaderc_result_get_error_message)                                                                                  \
-  X(shaderc_optimize_spv)
 
 #define SPIRV_CROSS_FUNCTIONS(X)                                                                                       \
   X(spvc_context_create)                                                                                               \
@@ -1615,63 +1613,6 @@
 #undef SPIRV_CROSS_FUNCTIONS
 #undef SHADERC_FUNCTIONS
 
-std::optional<DynamicHeapArray<u8>> GPUDevice::OptimizeVulkanSpv(const std::span<const u8> spirv, Error* error)
-{
-  std::optional<DynamicHeapArray<u8>> ret;
-
-  if (spirv.size() < sizeof(u32) * 2)
-  {
-    Error::SetStringView(error, "Invalid SPIR-V input size.");
-    return ret;
-  }
-
-  // Need to set environment based on version.
-  u32 magic_word, spirv_version;
-  shaderc_target_env target_env = shaderc_target_env_vulkan;
-  shaderc_env_version target_version = shaderc_env_version_vulkan_1_0;
-  std::memcpy(&magic_word, spirv.data(), sizeof(magic_word));
-  std::memcpy(&spirv_version, spirv.data() + sizeof(magic_word), sizeof(spirv_version));
-  if (magic_word != 0x07230203u)
-  {
-    Error::SetStringView(error, "Invalid SPIR-V magic word.");
-    return ret;
-  }
-  if (spirv_version < 0x10300)
-    target_version = shaderc_env_version_vulkan_1_0;
-  else
-    target_version = shaderc_env_version_vulkan_1_1;
-
-  if (!dyn_libs::OpenShaderc(error))
-    return ret;
-
-  const shaderc_compile_options_t options = dyn_libs::shaderc_compile_options_initialize();
-  AssertMsg(options, "shaderc_compile_options_initialize() failed");
-  dyn_libs::shaderc_compile_options_set_target_env(options, target_env, target_version);
-  dyn_libs::shaderc_compile_options_set_optimization_level(options, shaderc_optimization_level_performance);
-
-  const shaderc_compilation_result_t result =
-    dyn_libs::shaderc_optimize_spv(dyn_libs::s_shaderc_compiler, spirv.data(), spirv.size(), options);
-  const shaderc_compilation_status status =
-    result ? dyn_libs::shaderc_result_get_compilation_status(result) : shaderc_compilation_status_internal_error;
-  if (status != shaderc_compilation_status_success)
-  {
-    const std::string_view errors(result ? dyn_libs::shaderc_result_get_error_message(result) : "null result object");
-    Error::SetStringFmt(error, "Failed to optimize SPIR-V: {}\n{}",
-                        dyn_libs::shaderc_compilation_status_to_string(status), errors);
-  }
-  else
-  {
-    const size_t spirv_size = dyn_libs::shaderc_result_get_length(result);
-    DebugAssert(spirv_size > 0);
-    ret = DynamicHeapArray<u8>(spirv_size);
-    std::memcpy(ret->data(), dyn_libs::shaderc_result_get_bytes(result), spirv_size);
-  }
-
-  dyn_libs::shaderc_result_release(result);
-  dyn_libs::shaderc_compile_options_release(options);
-  return ret;
-}
-
 bool GPUDevice::CompileGLSLShaderToVulkanSpv(GPUShaderStage stage, GPUShaderLanguage source_language,
                                              std::string_view source, const char* entry_point, bool optimization,
                                              bool nonsemantic_debug_info, DynamicHeapArray<u8>* out_binary,
@@ -1699,8 +1640,7 @@
 
   dyn_libs::shaderc_compile_options_set_source_language(options, shaderc_source_language_glsl);
   dyn_libs::shaderc_compile_options_set_target_env(options, shaderc_target_env_vulkan, 0);
-  dyn_libs::shaderc_compile_options_set_generate_debug_info(options, m_debug_device,
-                                                            m_debug_device && nonsemantic_debug_info);
+  dyn_libs::shaderc_compile_options_set_generate_debug_info(options);
   dyn_libs::shaderc_compile_options_set_optimization_level(
     options, optimization ? shaderc_optimization_level_performance : shaderc_optimization_level_zero);
 
@@ -1712,10 +1652,8 @@
   if (status != shaderc_compilation_status_success)
   {
     const std::string_view errors(result ? dyn_libs::shaderc_result_get_error_message(result) : "null result object");
-    Error::SetStringFmt(error, "Failed to compile shader to SPIR-V: {}\n{}",
-                        dyn_libs::shaderc_compilation_status_to_string(status), errors);
-    ERROR_LOG("Failed to compile shader to SPIR-V: {}\n{}", dyn_libs::shaderc_compilation_status_to_string(status),
-              errors);
+    Error::SetStringFmt(error, "Failed to compile shader to SPIR-V: {}", errors);
+    ERROR_LOG("Failed to compile shader to SPIR-V: {}", errors);
     DumpBadShader(source, errors);
   }
   else
@@ -2088,22 +2026,6 @@
   else if (source_language == GPUShaderLanguage::SPV)
   {
     spv = std::span<const u8>(reinterpret_cast<const u8*>(source.data()), source.size());
-
-    if (optimization)
-    {
-      Error optimize_error;
-      std::optional<DynamicHeapArray<u8>> optimized_spv = GPUDevice::OptimizeVulkanSpv(spv, &optimize_error);
-      if (!optimized_spv.has_value())
-      {
-        WARNING_LOG("Failed to optimize SPIR-V: {}", optimize_error.GetDescription());
-      }
-      else
-      {
-        DEV_LOG("SPIR-V optimized from {} bytes to {} bytes", source.length(), optimized_spv->size());
-        intermediate_spv = std::move(optimized_spv.value());
-        spv = intermediate_spv.cspan();
-      }
-    }
   }
   else
   {
--- a/src/util/gpu_device.h	2025-05-19 19:04:44.205966096 -0700
+++ b/src/util/gpu_device.h	2025-05-19 19:05:04.589187767 -0700
@@ -926,7 +926,6 @@
                                                                 std::string_view source, const char* entry_point,
                                                                 GPUShaderLanguage target_language, u32 target_version,
                                                                 DynamicHeapArray<u8>* out_binary, Error* error);
-  static std::optional<DynamicHeapArray<u8>> OptimizeVulkanSpv(const std::span<const u8> spirv, Error* error);
 
   Features m_features = {};
   RenderAPI m_render_api = RenderAPI::None;
--- a/src/util/vulkan_pipeline.cpp	2025-05-19 19:05:36.245543164 -0700
+++ b/src/util/vulkan_pipeline.cpp	2025-05-19 19:05:49.932912917 -0700
@@ -66,16 +66,6 @@
   {
     // Optimize the SPIR-V if we're not using a debug device.
     std::optional<DynamicHeapArray<u8>> optimized_spv;
-    if (!m_debug_device)
-    {
-      Error optimize_error;
-      optimized_spv = GPUDevice::OptimizeVulkanSpv(
-        std::span<const u8>(reinterpret_cast<const u8*>(source.data()), source.size()), &optimize_error);
-      if (!optimized_spv.has_value())
-        WARNING_LOG("Failed to optimize SPIR-V: {}", optimize_error.GetDescription());
-      else
-        source = std::string_view(reinterpret_cast<const char*>(optimized_spv->data()), optimized_spv->size());
-    }
 
     if (out_binary)
       out_binary->assign(reinterpret_cast<const u8*>(source.data()), source.length());
--- a/src/util/gpu_device.cpp
+++ b/src/util/gpu_device.cpp
@@ -1424,7 +1424,7 @@ std::unique_ptr<GPUDevice> GPUDevice::CreateDeviceForAPI(RenderAPI api)
 
 #ifndef _WIN32
 // Use a duckstation-suffixed shaderc name to avoid conflicts and loading another shaderc, e.g. from the Vulkan SDK.
-#define SHADERC_LIB_NAME "shaderc_ds"
+#define SHADERC_LIB_NAME "shaderc_shared"
 #else
 #define SHADERC_LIB_NAME "shaderc_shared"
 #endif

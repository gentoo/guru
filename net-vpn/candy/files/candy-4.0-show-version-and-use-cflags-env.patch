From de8f5a3109ee3bdc472fbc7fcb1572aaad0b8cb9 Mon Sep 17 00:00:00 2001
From: lanthora <lanthora@outlook.com>
Date: Thu, 29 Feb 2024 05:16:53 +0000
Subject: [PATCH] =?UTF-8?q?=E6=94=AF=E6=8C=81=E6=98=BE=E7=A4=BA=E7=89=88?=
 =?UTF-8?q?=E6=9C=AC=E5=8F=B7?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 CMakeLists.txt   | 10 ++++++----
 src/main/main.cc | 13 +++++++++++++
 2 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1ebf2c0..dffc31d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,10 +1,12 @@
 cmake_minimum_required(VERSION 3.18.4)
 
-project(candy CXX)
+project(candy LANGUAGES CXX VERSION 4.0)
 
-set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -std=c++2b -Wall -Werror -Wfatal-errors -Wno-unknown-pragmas")
-set(CMAKE_CXX_FLAGS_DEBUG_INIT "-g -fsanitize=address")
-set(CMAKE_CXX_FLAGS_RELEASE_INIT "-O2")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2b -Wall -Werror -Wfatal-errors -Wno-unknown-pragmas")
+set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")
+set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
+
+add_compile_definitions(VERSION="${CMAKE_PROJECT_VERSION}")
 
 include_directories(${CMAKE_SOURCE_DIR}/src)
 
diff --git a/src/main/main.cc b/src/main/main.cc
index 286d24d..65cdc4f 100644
--- a/src/main/main.cc
+++ b/src/main/main.cc
@@ -21,6 +21,10 @@
 
 #include <argp.h>
 
+#ifndef VERSION
+#define VERSION "unknown"
+#endif
+
 namespace {
 
 struct arguments {
@@ -54,6 +58,7 @@ struct argp_option options[] = {
     {"config", 'c', "PATH", 0, "Configuration file path"},
     {"discovery", OPT_DISCOVERY_INTERVAL, "SECONDS", 0, "Active discovery broadcast interval"},
     {"route", 'r', "COST", 0, "Cost of routing"},
+    {"version", 'v', 0, 0, "Show version"},
     {"no-timestamp", OPT_NO_TIMESTAMP, 0, 0, "Log does not show time"},
     {"debug", OPT_LOG_LEVEL_DEBUG, 0, 0, "Show debug level logs"},
     {"auto-restart", OPT_AUTO_RESTART, 0, 0, "Automatic restart"},
@@ -72,6 +77,11 @@ int setLogLevelDebug() {
     return 0;
 }
 
+void showVersion() {
+    std::cout << VERSION << std::endl;
+    exit(0);
+}
+
 bool needShowUsage(struct arguments *arguments, struct argp_state *state) {
     if (state->arg_num > 0)
         return true;
@@ -141,6 +151,9 @@ int parseOption(int key, char *arg, struct argp_state *state) {
     case 'c':
         parseConfigFile(arguments, arg);
         break;
+    case 'v':
+        showVersion();
+        break;
     case OPT_NO_TIMESTAMP:
         disableLogTimestamp();
         break;
